#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* sxl
#include "SxavengerLibrary.h"

//* c++
#include <stdexcept>

////////////////////////////////////////////////////////////////////////////////////////////
// Sxl
////////////////////////////////////////////////////////////////////////////////////////////
_SXL_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////
// ExpectedStatus enum class
////////////////////////////////////////////////////////////////////////////////////////////
enum class ExpectedStatus : bool {
	None      = false,
	Exception = true
};

////////////////////////////////////////////////////////////////////////////////////////////
// Expected class
////////////////////////////////////////////////////////////////////////////////////////////
template <class _Ty, class _Error>
class Expected {
public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	const _Error& What() const {
		if (status_ != ExpectedStatus::Exception) {
			throw std::runtime_error("Expected does not contain an error.");
		}

		return error_;
	};

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	_Ty value_;
	_Error error_;
	ExpectedStatus status_ = ExpectedStatus::None;

};

_SXL_NAMESPACE_END
