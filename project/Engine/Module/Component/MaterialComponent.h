#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* engine
#include <Engine/System/DirectX/DxObject/DxDimensionBuffer.h>
#include <Engine/System/DirectX/DirectXAlignment.h>

//* lib
#include <Lib/Geometry/Color.h>

//* c++
#include <cstdint>

////////////////////////////////////////////////////////////////////////////////////////////
// MaterialComponent class
////////////////////////////////////////////////////////////////////////////////////////////
class MaterialComponent {
public:

	////////////////////////////////////////////////////////////////////////////////////////////
	// enum class State
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Transparency : uint32_t {
		Opaque,
		Transparent,
	};

	_BEGIN_GPU_BUFFER_ALIGNAS

	////////////////////////////////////////////////////////////////////////////////////////////
	// Albedo structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Albedo {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(const Color3f& _color);

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		Color3f color  = kWhite3;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Opacity structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Opacity {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(float _alpha);

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		float alpha    = 1.0f;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Normal structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Normal {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			None,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetNone();

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::None;

		uint32_t index = NULL;

	};


	////////////////////////////////////////////////////////////////////////////////////////////
	// MaterialBuffer structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS MaterialBuffer {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Albedo       albedo;
		Opacity      opacity;
		Normal       normal;

	};
	// todo: 各parameterをprivateにする

	_END_GPU_BUFFER_ALIGNAS

public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	MaterialComponent()  = default;
	~MaterialComponent() = default;

	void Create();

	const D3D12_GPU_VIRTUAL_ADDRESS& GetGPUVirtualAddress() const;

	//* getter *//

	const MaterialBuffer& GetMaterial() const;
	MaterialBuffer& GetMaterial();

protected:

	//=========================================================================================
	// protected variables
	//=========================================================================================

	std::unique_ptr<DxObject::DimensionBuffer<MaterialBuffer>> buffer_;

	Transparency transparency_ = Transparency::Opaque;

};
