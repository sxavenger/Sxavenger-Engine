#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* engine
#include <Engine/System/DirectX/DxObject/DxDimensionBuffer.h>
#include <Engine/System/DirectX/DirectXAlignment.h>

//* lib
#include <Lib/Geometry/Vector3.h>
#include <Lib/Geometry/Color3.h>

////////////////////////////////////////////////////////////////////////////////////////////
// ParticleConfig class
////////////////////////////////////////////////////////////////////////////////////////////
class ParticleConfig {
public:

	_PUSH_GPU_BUFFER_ALIGNAS

	////////////////////////////////////////////////////////////////////////////////////////////
	// Albedo structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Albedo {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value   = 0,
			Texture = 1
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		void SetValue(const Color3f& _albedo);

		void SetTexture(uint32_t _index, const Color3f& _albedo = kWhite3<float>);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type;

		Color3f albedo;
		uint32_t index;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Transparent structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Transparent {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value   = 0,
			Texture = 1
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		void SetValue(float _transparent);

		void SetTexture(uint32_t _index, float _transparent = 1.0f);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type;

		float    transparent;
		uint32_t index;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Config structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Config {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//=========================================================================================
		// public variables
		//=========================================================================================

		_GPU_BUFFER_ALIGNAS Albedo albedo;
		_GPU_BUFFER_ALIGNAS Transparent transparent;

		uint32_t isBillboard; //!< flag
		// todo: Y軸billboardを追加.

	};

	_POP_GPU_BUFFER_ALIGNAS

public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	void Create(uint32_t count);

	Config& At(size_t index);
	const Config& At(size_t index) const;

	const D3D12_GPU_VIRTUAL_ADDRESS& GetGPUVirtualAddress() const;

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	std::unique_ptr<DxObject::DimensionBuffer<Config>> buffer_;
	
};
