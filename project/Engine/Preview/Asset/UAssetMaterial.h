#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* uasset
#include "UBaseAsset.h"
#include "UAssetTexture.h"

//* engine
#include <Engine/Asset/Assets/Material/Material.h> //!< 移動予定

////////////////////////////////////////////////////////////////////////////////////////////
// UMaterial class
////////////////////////////////////////////////////////////////////////////////////////////
class UMaterial final { //!< 整理用のMaterialクラス
public:

	////////////////////////////////////////////////////////////////////////////////////////////
	// Channel enum class
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Channel : uint32_t { //!< Textureのchannel指定用
		r = 0,
		g = 1,
		b = 2,
		a = 3,
	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Albedo structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Albedo {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
			Multiply,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(const Color3f& _color);

		void SetTexture(uint32_t _index);

		void SetMultiply(const Color3f& _color, const std::optional<uint32_t>& _index = std::nullopt);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		Color3f color  = kWhite3<float>;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Transparency structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Transparency {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(float _alpha);

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		float alpha    = 1.0f;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Normal structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Normal {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			None,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetNone();

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::None;

		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Property structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Property { //!< helper struct
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(float _value);

		void SetTexture(uint32_t _index);

		//=========================================================================================
		// public methods
		//=========================================================================================

		Type type = Type::Value;

		float value = 0.0f;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// SurfaceProperties structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct SurfaceProperties { //!< ARM
	public: 

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Property ao;
		Property roughness;
		Property metallic;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// UVTransformation structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct UVTransformation {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		void Transfer(const Matrix4x4& _mat);

		//=========================================================================================
		// public variables
		//=========================================================================================

		Matrix4x4 mat;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// MaterialBuffer structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct MaterialBuffer {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//=========================================================================================
		// public variables
		//=========================================================================================

		UVTransformation  transformation;
		Albedo            albedo;
		Transparency      transparency;
		Normal            normal;
		SurfaceProperties properties;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Mode enum class 
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Mode : uint8_t {
		Opaque,      //!< 不透明
		Translucent, //!< 半透明
	};

public:

private:
};

////////////////////////////////////////////////////////////////////////////////////////////
// UAssetMaterial class
////////////////////////////////////////////////////////////////////////////////////////////
class UAssetMaterial final
	: public UBaseAsset {
public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	UAssetMaterial()  = default;
	~UAssetMaterial() = default;

	//* --- option *//

	//* sasset option *//

	json Serialize() const override;

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	//* asset data *//

	Material material_;

	//* parameter *//

	/* note: parameterの設定
	 - texture(Uuid)
	 - value(型はバラバラ)

	*/

};
