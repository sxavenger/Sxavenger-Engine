#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* lib
#include <Lib/Adapter/Uuid/Uuid.h>

//* c++
#include <concepts>
#include <optional>

////////////////////////////////////////////////////////////////////////////////////////////
// UBaseAsset class
////////////////////////////////////////////////////////////////////////////////////////////
class UBaseAsset {
public:

	////////////////////////////////////////////////////////////////////////////////////////////
	// Status enum class
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Status : uint8_t {
		None,     //!< 初期状態
		Complete, //!< Setupが完了した状態
	};

public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	UBaseAsset(const Uuid& id) : id_(id) {}
	virtual ~UBaseAsset() = default;

	const Uuid& GetId() const { return id_; }

protected:

	//=========================================================================================
	// protected variables
	//=========================================================================================

	Status status_ = Status::None;

	//=========================================================================================
	// protected methods
	//=========================================================================================

	bool IsComplete() const { return status_ == Status::Complete; }

	void Complete() { status_ = Status::Complete; }

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	const Uuid id_;

};

////////////////////////////////////////////////////////////////////////////////////////////
// concept
////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
concept UAssetConcept = std::derived_from<T, UBaseAsset> && !std::is_same_v<T, UBaseAsset>;
