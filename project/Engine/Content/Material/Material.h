#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* engine
#include <Engine/System/DirectX/DxObject/DxDimensionBuffer.h>
#include <Engine/System/DirectX/DirectXAlignment.h>

//* lib
#include <Lib/Traits.h>
#include <Lib/Geometry/Color.h>

////////////////////////////////////////////////////////////////////////////////////////////
// Material class
////////////////////////////////////////////////////////////////////////////////////////////
class Material {
public:

	////////////////////////////////////////////////////////////////////////////////////////////
	// State enum class 
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class BlendMode : uint8_t {
		Opaque,      //!< 不透明
		Translucent, //!< 半透明
	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Channel enum class
	////////////////////////////////////////////////////////////////////////////////////////////
	enum class Channel : uint32_t { //!< Textureのchannel指定用
		r = 0,
		g = 1,
		b = 2,
		a = 3,
	};

	_PUSH_GPU_BUFFER_ALIGNAS


	////////////////////////////////////////////////////////////////////////////////////////////
	// Albedo structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Albedo {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(const Color3f& _color);

		void SetTexture(uint32_t _index);

		//* debug *//

		void SetImGuiCommand();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		Color3f color = kWhite3;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Transparency structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Transparency {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(float _alpha);

		void SetTexture(uint32_t _index);

		//* debug *//

		void SetImGuiCommand();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::Value;

		float alpha = 1.0f;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Normal structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Normal {
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			None,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetNone();

		void SetTexture(uint32_t _index);

		//* debug *//

		void SetImGuiCommand();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Type type = Type::None;

		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// Property structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS Property { //!< helper struct
	public:

		////////////////////////////////////////////////////////////////////////////////////////////
		// Type enum class
		////////////////////////////////////////////////////////////////////////////////////////////
		enum class Type : uint32_t {
			Value,
			Texture,
		};

	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* option *//

		void SetValue(float _value);

		void SetTexture(uint32_t _index);

		//* debug *//

		void SetImGuiCommand();

		//=========================================================================================
		// public methods
		//=========================================================================================

		Type type = Type::Value;

		float value = 0.0f;
		uint32_t index = NULL;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// SurfaceProperties structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS SurfaceProperties {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//* debug *//

		void SetImGuiCommand();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Property metallic;
		Property specular;
		Property roughness;

	};

	////////////////////////////////////////////////////////////////////////////////////////////
	// MaterialBuffer structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct _GPU_BUFFER_ALIGNAS MaterialBuffer {
	public:

		//=========================================================================================
		// public methods
		//=========================================================================================

		void Init();

		//=========================================================================================
		// public variables
		//=========================================================================================

		Albedo            albedo;
		Transparency      transparency;
		Normal            normal;
		SurfaceProperties properties;

	};
	// todo: 各parameterをprivateにする


	_POP_GPU_BUFFER_ALIGNAS

public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	Material()  = default;
	~Material() = default;

	void CreateBuffer();

	//* getter *//

	const D3D12_GPU_VIRTUAL_ADDRESS& GetGPUVirtualAddress() const;

	const MaterialBuffer& GetMaterial() const;
	MaterialBuffer& GetMaterial();

	const BlendMode GetBlendMode() const { return mode_; }

	_DEFAULT_MOVE(Material)

	//* imgui *//

	void SetImGuiCommand();

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	BlendMode mode_ = BlendMode::Opaque;

	std::unique_ptr<DxObject::DimensionBuffer<MaterialBuffer>> buffer_ = nullptr;

};
